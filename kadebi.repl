
(begin-tx)
(define-namespace 'free (sig-keyset) (sig-keyset))
(env-keys ["admin-key", "duong-key", "nguyen-key", "host-key"])
(env-data {"admin-keyset": ["admin-key"],
  "duong-keyset": ["duong-key"],
  "nguyen-keyset": ["nguyen-key"],
  "host-keyset": ["host-key"],
  "host-account": "host",
  "upgrade": false
  }
)
(load "root/fungible-v2.pact")
(load "root/coin.pact")
(load "kadebi.pact")
(commit-tx)

(begin-tx)

(use coin)
(create-account "host" (read-keyset "host-keyset"))
(create-account "duong" (read-keyset "duong-keyset"))
(create-account "nguyen" (read-keyset "nguyen-keyset"))

(create-account "k:0000000000000000000000000000000000000000000000000000000000000000" (read-keyset "admin-keyset"))
(expect "duong balance" 0.0 (at 'balance (details "duong")))
(expect "nguyen balance" 0.0 (at 'balance (details "nguyen")))
(test-capability (CREDIT "duong"))
(credit "duong" (read-keyset "duong-keyset") 100.0)
(use free.kadebi)
(expect "current round: 0" 0 (get-current-round BINARY_MODE))
(expect "" (hash "initial hash") (at "hash" (round-details BINARY_MODE 0)))
(env-chain-data {"block-time": (time "2020-10-31T00:00:00Z")})
(expect-failure "direct call to get-current-round fails" (create-new-round BINARY_MODE 1))
(test-capability (free.kadebi.CREATE_ROUND))
(create-new-round BINARY_MODE 1)
(expect "current round: 1" 1 (get-current-round BINARY_MODE))
(expect "" (hash "initial hash") (at "hash" (round-details BINARY_MODE 1)))
(expect "created round is-closed: false" false (at "is-closed" (round-details BINARY_MODE 1)))
(expect "created round open-time" (time "2020-10-31T00:00:00Z") (at "open-time" (round-details BINARY_MODE 1)))
(expect "created round voted-amount-list" [0.0 0.0] (at "voted-amount-list" (round-details BINARY_MODE 1)))

(expect "created round filled-number" 0 (at "filled-number" (round-details BINARY_MODE 1)))
(env-gaslimit 150000)
(env-gasmodel "table")
; (env-gas 0) (env-gaslog)
; (test)
; (env-gaslog)
(expect "set the elemnt at index 0 of array [1.0 2.0 3.0] to 4.0 => [4.0 2.0 3.0]" [4.0 2.0 3.0] (update-array-element [1.0 2.0 3.0] 0 4.0))
(expect "set the elemnt at index 1 of array [1.0 2.0 3.0] to 4.0 => [1.0 4.0 3.0]" [1.0 4.0 3.0] (update-array-element [1.0 2.0 3.0] 1 4.0))
(expect "set the elemnt at index 2 of array [1.0 2.0 3.0] to 4.0 => [1.0 2.0 4.0]" [1.0 2.0 4.0] (update-array-element [1.0 2.0 3.0] 2 4.0))
(expect "" 0 (amin-list [0.0 1.0 2.0]))
(expect "" 1 (amin-list [1.0 0.0 2.0]))
(expect "" 2 (amin-list [1.0 2.0 0.0]))
(expect "" 2 (amin-list [2.0 1.0 0.0]))
(expect "" 3 (count [1.0 2.0 3.0 1.0 5.0 6.0 1.0] 1.0))
(expect "" true (is-list-has-only-one-smallest-value [1.0 2.0 3.0 1.1 1.2]))
(expect "" false (is-list-has-only-one-smallest-value [2.0 3.0 1.0 1.1 1.2 1.0]))
(enforce-current-round BINARY_MODE 1)
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 1.0), (VOTE "duong")]}])
; (read-keyset "duong-keyset")
(expect-failure "locked" (vote BINARY_MODE 1 "duong" 0 1.0 false))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-keys ["admin-key"])
(unlock BINARY_MODE)
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 1.0), (VOTE "duong")]}])
(vote BINARY_MODE 1 "duong" 0 1.0 false)
(expect "" [1.0 0.0] (at "voted-amount-list" (round-details BINARY_MODE 1)))
(expect "" 1 (at "filled-number" (round-details BINARY_MODE 1)))
(expect "" 99.0 (at "balance" (coin.details "duong")))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 1.0), (VOTE "duong")]}])
(vote BINARY_MODE 1 "duong" 0 1.0  false)
(expect "" [2.0 0.0] (at "voted-amount-list" (round-details BINARY_MODE 1)))
(expect "" 1 (at "filled-number" (round-details BINARY_MODE 1)))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 1.0), (VOTE "duong")]}])
(vote BINARY_MODE 1 "duong" 1 1.0 false)
(expect "" [2.0 1.0] (at "voted-amount-list" (round-details BINARY_MODE 1)))
(expect "" 2 (at "filled-number" (round-details BINARY_MODE 1)))
(expect "" 97.0 (at "balance" (coin.details "duong")))
(commit-tx)
(begin-tx)

(use free.kadebi)
(expect "" 0 (lcg 0 [0]))
(expect "" 1 (lcg 0 [1]))
(expect "" 1 (lcg 0 [(^ 2 64)]))
(expect "" 6364136223846793006 (lcg 1 [1]))  ;(6364136223846793005 + 1) % (2 ^ 64 - 1)
(expect "" (mod (+ (* 6364136223846793006 6364136223846793005) 2) (- (^ 2 64) 1)) (lcg 1 [1 2]))  ;((6364136223846793005 + 1) * 6364136223846793005 + 2) % (2 ^ 64 - 1)
(expect "" 97 (at "a" CHAR_MAP))
(expect "" 34 (at "\"" CHAR_MAP))
(expect "" 39 (at "\'" CHAR_MAP))
; (expect "" [97 98 99 65 66 67 48 49 57 45 192 92 116 1442695040888963407] (string-to-ascii-codes "abcABC019-Ã€\\t\t"))
; (expect "" 0.617860857337 (rand (get-current-time) (hash "test") (hash "test") "k:duong"))
(commit-tx)

;move to phase 2
(begin-tx)
(use free.kadebi)
(test-capability (CREATE_ROUND))
(env-chain-data {"block-time": (time "2022-01-01T00:00:00Z")})
(create-new-round BINARY_MODE 2)
(expect "" PHASE_ONE (at "phase" (round-details BINARY_MODE 2)))
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 3.0), (VOTE "duong")]}])
(expect "" (time "2022-01-01T00:00:00Z") (get-current-time))
(expect "" (time "2022-01-01T00:00:00Z") (at "open-time" (round-details BINARY_MODE 2)))
(vote BINARY_MODE 2 "duong" 1 3.0 false)
(coin.details "duong")
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 1.0), (VOTE "duong")]}])
(vote BINARY_MODE 2 "duong" 0 1.0 false)
(expect "" PHASE_ONE (at "phase" (round-details BINARY_MODE 2)))
(expect "" 0.0 (at "phase-1-voted-total" (round-details BINARY_MODE 2)))
(expect "" false (at "is-closed" (round-details BINARY_MODE 2)))
(expect "" 2.0 (get-total-diff BINARY_MODE 2))

(commit-tx)
(begin-tx)
(use free.kadebi)
(env-chain-data {"block-time": (time "2022-01-02T00:00:00Z")})
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 2.0), (VOTE "duong")]}])
(vote BINARY_MODE 2 "duong" 1 2.0 false)
;[1 5]
(expect "" PHASE_TWO (at "phase" (round-details BINARY_MODE 2)))
(expect "" 6.0 (at "phase-1-voted-total" (round-details BINARY_MODE 2)))
(expect "" false (at "is-closed" (round-details BINARY_MODE 2)))
(expect "" 4.0 (get-total-diff BINARY_MODE 2))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-chain-data {"block-time": (time "2022-01-03T00:00:00Z"), "prev-block-hash": (hash "test2")})
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 2.0), (VOTE "duong")]}])
(vote BINARY_MODE 2 "duong" 0 2.0 true)
(expect "" false (at "is-closed" (round-details BINARY_MODE 2)))
(at "hash" (round-details BINARY_MODE 2))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 8.0), (VOTE "duong")]}])
(vote BINARY_MODE 2 "duong" 0 8.0 true)
(expect "" 3 (get-current-round BINARY_MODE))

;[11, 5]
; (expect "" PHASE_TWO (at "phase" (round-details 2)))
; (expect "" 6.0 (at "phase-1-voted-total" (round-details 2)))
(expect "" true (at "is-closed" (round-details BINARY_MODE 2)))
(expect "" 5.0 (get-account-win-amount BINARY_MODE 2 "duong"))
(expect-failure "not account owner" (claim BINARY_MODE 2 "nguyen"))
(expect "" 81.0 (at "balance" (coin.details "duong")))
(expect "" [0.0 5.1] (at "voted-amount-list" (round-details BINARY_MODE 3))) ;/0.85 * 6
(commit-tx)
(begin-tx)
(use free.kadebi)

;[0.0 5.1]
(env-keys ["admin-key", "duong-key", "nguyen-key"])
(env-data {"admin-keyset": ["admin-key"],
  "duong-keyset": ["duong-key"],
  "nguyen-keyset": ["nguyen-key"],
  "upgrade": false
  }
)
(claim BINARY_MODE 2 "duong")
(expect "" 86.0 (at "balance" (coin.details "duong")))
; (expect "" 2.0 (get-total-diff 2))
(commit-tx)
(begin-tx)
(use free.kadebi)
(test-capability (coin.CREDIT "nguyen"))
(coin.credit "nguyen" (read-keyset "nguyen-keyset") 99.0)
(expect "" 99.0 (at "balance" (coin.details "nguyen")))
(env-sigs [{"key": "nguyen-key", "caps": [(coin.TRANSFER "nguyen" CONTRACT_ACCOUNT 10.0), (VOTE "nguyen")]}])
(vote BINARY_MODE 3 "nguyen" 0 10.0 true)
(expect "" 89.0 (at "balance" (coin.details "nguyen")))
(env-chain-data {"block-time": (time "2022-01-04T00:00:00Z")})
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 5.0), (VOTE "duong")]}])
(vote BINARY_MODE 3 "duong" 1 5.0 true)
(expect "" PHASE_TWO (at "phase" (round-details BINARY_MODE 3)))
(expect "" false (at "is-closed" (round-details BINARY_MODE 3)))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 15.0), (VOTE "duong")]}])
(vote BINARY_MODE 3 "duong" 0 15.0 true)
;[25.0 10.1]
(expect "" true (at "is-closed" (round-details BINARY_MODE 3)))
(expect "" 0.0 (get-account-win-amount BINARY_MODE 3 "nguyen"))
(expect "" 5.0 (get-account-win-amount BINARY_MODE 3 "duong"))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-keys ["duong-key", "nguyen-key", "host-key", "admin-key"])
(expect-failure "" (claim BINARY_MODE 3 "nguyen"))
(expect "" 66.0 (at "balance" (coin.details "duong")))
(claim BINARY_MODE 3 "duong")
(expect "" 71.0 (at "balance" (coin.details "duong")))
(expect "" 0.0 (at "balance" (coin.details "host")))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-keys ["host-key"])
(host-claim BINARY_MODE 3)
(expect "" 1.49 (at "balance" (coin.details "host")))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-keys ["host-key"])
(host-claim BINARY_MODE 2)
(expect "" (+ 1.49 0.6) (at "balance" (coin.details "host")))
(expect-failure "already claimed" (host-claim BINARY_MODE 2))
(expect "" [22.865 0.0] (at "voted-amount-list" (round-details BINARY_MODE 4))) ;0.85 * 14.9 + 5.1 * 2
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-keys ["host-key"])
(expect-failure "round is not created" (host-claim BINARY_MODE 5))
(expect-failure "round is not closed" (host-claim BINARY_MODE 0))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-chain-data {"block-time": (time "2022-01-05T00:00:00Z")})
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 10.0), (VOTE "duong")]}])
(vote BINARY_MODE 4 "duong" 1 10.0 true)
;[22.865 10.0]
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-sigs [{"key": "duong-key", "caps": [(coin.TRANSFER "duong" CONTRACT_ACCOUNT 32.865), (VOTE "duong")]}])
(vote BINARY_MODE 4 "duong" 0 32.865 true) ;;end-round
;[55.730 10.0]
(expect "" 5 (get-current-round BINARY_MODE))
(expect "" 45.730 (get-total-diff BINARY_MODE 4))
(expect "" [0.0 38.8705] (at "voted-amount-list" (round-details BINARY_MODE 5))) ;X lost -> 0.85 * 45.730
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-chain-data {"block-time": (time "2022-01-05T00:00:00Z")})
(env-sigs [{"key": "nguyen-key", "caps": [(coin.TRANSFER "nguyen" CONTRACT_ACCOUNT 10.0), (VOTE "nguyen")]}])
(vote BINARY_MODE 5 "nguyen" 0 10.0 true) ;move to phase 2 of round 5
(expect "" true (can-end-current-round BINARY_MODE 5 "asdf" 48.8705))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-sigs [{"key": "nguyen-key", "caps": [(coin.TRANSFER "nguyen" CONTRACT_ACCOUNT 28.8705), (VOTE "nguyen")]}])
(vote BINARY_MODE 5 "nguyen" 0 28.8705 true)
(expect "" [38.8705 38.8705] (at "voted-amount-list" (round-details BINARY_MODE 5))) ;X lost -> 0.85 * 45.730
(expect "" false (can-end-current-round BINARY_MODE 5 "asdf" 48.8705))
(commit-tx)
(begin-tx)
(use free.kadebi)
(env-keys ["admin-key"])
(lock BINARY_MODE)
(env-sigs [{"key": "nguyen-key", "caps": [(coin.TRANSFER "nguyen" CONTRACT_ACCOUNT 10.0), (VOTE "nguyen")]}])
(expect-failure "locked" (vote BINARY_MODE 5 "nguyen" 0 1.0 true))
(commit-tx)
